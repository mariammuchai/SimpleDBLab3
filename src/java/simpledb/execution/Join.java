package simpledb.execution;

import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;
import simpledb.transaction.TransactionAbortedException;
import simpledb.storage.Field;

import java.util.NoSuchElementException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.HashMap;




/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    private JoinPredicate p;
    private OpIterator child1;
    private OpIterator child2;
    private OpIterator[] children;
    private Tuple t;
    private ArrayList<Tuple> rightTuples = new ArrayList<>();
    private ArrayList<Tuple> leftTuples = new ArrayList<>();
    private Iterator<Tuple> leftTuplesIter;
    private Iterator<Tuple> rightTuplesIter;
    private Iterator<Tuple> tuplesIterator;
    private List<Tuple> joinedTuples;
    private boolean computed;

    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        //checking if child1 or child2 are null before saving them
        if (child1 == null || child2 == null) {
            throw new IllegalArgumentException("children should not be null");
        }
        // saving variables
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
        this.leftTuplesIter = leftTuples.iterator();
        this.rightTuplesIter = rightTuples.iterator();
        this.t = null;
        computed = false;
        tuplesIterator = null;
        this.joinedTuples = new ArrayList<Tuple>();


    }

    public JoinPredicate getJoinPredicate() {
        // done
        return p;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField1Name() {
        // get the join predicate used;
        JoinPredicate jPred = getJoinPredicate();
        //get the index of the first join field
        int field1Index = jPred.getField1();
        //get the left table child operator
        OpIterator child1 = getChildren()[0];
        //get child1's tupleDesc
        TupleDesc child1TupleDesc = child1.getTupleDesc();
        //return the name of the first join field
        return child1TupleDesc.getFieldName(field1Index);
    }

    /**
     * @return the field name of join field2. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField2Name() {
        // get the join predicate used;
        JoinPredicate jPred = getJoinPredicate();
        //get the index of the second join field
        int field2Index = jPred.getField2();
        //get the left table child operator
        OpIterator child2 = getChildren()[1];
        //get child1's tupleDesc
        TupleDesc child2TupleDesc = child2.getTupleDesc();
        //return the name of the first join field
        return child2TupleDesc.getFieldName(field2Index);
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *         implementation logic.
     */
    public TupleDesc getTupleDesc() {
        //done
        return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // done; call open on both child operators
        child1.open();
        child2.open();
        //call super.open to set the state to OPEN
        super.open();
    }

    public void close() {
        // done; close both child operators
        child1.close();
        child2.close();
        //close the base implementation of close() to release any resources held by this operator
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        //add a check to make sure that both left and right are initialized before rewinding
        if (child1 == null || child2 == null) {
            throw new DbException("Either child1 or child2 is null");
        }
        //call rewind() on both of the child operators
        child1.rewind();
        child2.rewind();


    }
    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        //set the left and right child opIterators
        OpIterator leftChild = this.child1;
        OpIterator rightChild = this.child2;
        //check if both children exist
        if (leftChild == null || rightChild == null) {
            throw new NoSuchElementException();
        }
        //if the join hasn't been computed yet, compute it
        if (!computed) {
            // Create hashmaps to store tuples from the left and right child
            HashMap<Field, ArrayList<Tuple>> leftTuplesMap = new HashMap<>();
            HashMap<Field, ArrayList<Tuple>> rightTuplesMap = new HashMap<>();

            // Store tuples from the left child in the leftTuplesMap
            while (leftChild.hasNext()) {
                Tuple leftTuple = leftChild.next();
                Field leftField = leftTuple.getField(this.p.getField1());

                // Create an arraylist of tuples for each unique field value
                ArrayList<Tuple> leftTuples = leftTuplesMap.getOrDefault(leftField, new ArrayList<>());
                leftTuples.add(leftTuple);
                leftTuplesMap.put(leftField, leftTuples);
            }

            // Store tuples from the right child in the rightTuplesMap
            while (rightChild.hasNext()) {
                Tuple rightTuple = rightChild.next();
                Field rightField = rightTuple.getField(this.p.getField2());

                // Create an arraylist of tuples for each unique field value
                ArrayList<Tuple> rightTuples = rightTuplesMap.getOrDefault(rightField, new ArrayList<>());
                rightTuples.add(rightTuple);
                rightTuplesMap.put(rightField, rightTuples);
            }

            // Join the tuples using the hashmaps
            for (Field leftField : leftTuplesMap.keySet()) {
                ArrayList<Tuple> leftTuples = leftTuplesMap.get(leftField);

                // Check if there are matching tuples in the rightTuplesMap
                if (rightTuplesMap.containsKey(leftField)) {
                    ArrayList<Tuple> rightTuples = rightTuplesMap.get(leftField);

                    // Join the matching tuples
                    for (Tuple leftTuple : leftTuples) {
                        for (Tuple rightTuple : rightTuples) {
                            if (this.p.filter(leftTuple, rightTuple)) {
                                //create a new combined tuple
                                TupleDesc combinedTupleDesc = this.getTupleDesc();
                                Tuple combinedTuple = new Tuple(combinedTupleDesc);
                                int combinedTupleIndex = 0;
                                for (int i = 0; i < leftTuple.getTupleDesc().numFields(); i++) {
                                    combinedTuple.setField(combinedTupleIndex++, leftTuple.getField(i));
                                }
                                for (int j = 0; j < rightTuple.getTupleDesc().numFields(); j++) {
                                    combinedTuple.setField(combinedTupleIndex++, rightTuple.getField(j));
                                }
                                //set the recordId of the combined tuple
                                combinedTuple.setRecordId(leftTuple.getRecordId());
                                //Add the combined tuple to the list of joined tuples
                                joinedTuples.add(combinedTuple);
                            }
                        }
                    }
                }
            }
            //set the computed flag to true and initialize the tuplesIterator
            computed = true;
            this.tuplesIterator = joinedTuples.iterator();
        }
        //If there are more tuples in the joinedTuples list, return the next tuple
        if (this.tuplesIterator.hasNext()) {
            return this.tuplesIterator.next();
        } else {
            //if there are no more tuples in the joinedTuples list, rewind the children and reset
            //the computed flag.
            child1.rewind();
            child2.rewind();
            joinedTuples.clear();
            computed = false;
            //fetchNext();
            this.tuplesIterator= this.joinedTuples.iterator();
            if (this.tuplesIterator.hasNext()) {
                return this.tuplesIterator.next();
            } else {
                return null;
            }
        }
    }



    @Override
    public OpIterator[] getChildren() {
        // create an array of size 2 to hold the two child operators
        OpIterator[] children = new OpIterator[2];

        // check if child1 is null before setting it to the first child operator
        if (child1 != null) {
            children[0] = this.child1;
        }

        // check if child2 is null before setting it to the second child operator
        if (child2 != null) {
            children[1] = this.child2;
        }

        // return the array of child operators
        return children;
    }


    @Override
    public void setChildren(OpIterator[] children) {
        // Check that the input array is not null and has two elements
        if (children == null || children.length != 2) {
            throw new IllegalArgumentException("Children array must have two elements");
        }

        // Check that both child operators are not null
        if (children[0] == null || children[1] == null) {
            throw new IllegalArgumentException("Both child operators must be initialized");
        }

        child1 = children[0];
        child2 = children[1];
    }

}

